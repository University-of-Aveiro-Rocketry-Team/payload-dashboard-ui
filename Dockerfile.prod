# Stage 1: Build the application using Node

# Use an official Node runtime as a parent image
FROM node:latest as build-stage

# Declare build-time environment variables
ARG VITE_API_IP
ARG VITE_MQTT_USERNAME
ARG VITE_MQTT_PASSWORD

# Set the environment variables
ENV VITE_API_IP=${VITE_API_IP}
ENV VITE_MQTT_USERNAME=${VITE_MQTT_USERNAME}
ENV VITE_MQTT_PASSWORD=${VITE_MQTT_PASSWORD}

# Set the working directory in the container
WORKDIR /app

# Copy the package.json and yarn.lock files
COPY package.json yarn.lock ./

# Install dependencies
RUN yarn install

# Bundle the source code inside the Docker image
COPY . .

# Build the application (assuming you have a build script in package.json)
RUN yarn build

# Stage 2: Serve the built application using Nginx

# Use an official Nginx runtime as a parent image for the serving stage
FROM nginx:alpine

# Copy the built application from the previous stage
COPY --from=build-stage /app/dist /usr/share/nginx/html

# Expose port 80 for Nginx
EXPOSE 80

# Start Nginx when the container launches
# Nginx will automatically start and serve the files in /usr/share/nginx/html
CMD ["nginx", "-g", "daemon off;"]
